
DTImp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000486  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800104  00800104  0000051e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000c78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000667  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000235  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000557  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014e  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015e  00000000  00000000  00001d1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_15>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a4 e0       	ldi	r26, 0x04	; 4
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a9 33       	cpi	r26, 0x39	; 57
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  c8:	0c 94 41 02 	jmp	0x482	; 0x482 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <draw_color>:
 *  Author: Ã˜ystein Smith
 */ 
#include "draw.h"
#include <util/delay.h>

void draw_color(int r, int g, int b){
  d0:	58 2f       	mov	r21, r24
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0; i<16; i++){
			image[i*3]   = r;
  d6:	29 e0       	ldi	r18, 0x09	; 9
  d8:	31 e0       	ldi	r19, 0x01	; 1
  da:	f9 01       	movw	r30, r18
  dc:	e8 0f       	add	r30, r24
  de:	f9 1f       	adc	r31, r25
  e0:	50 83       	st	Z, r21
 *  Author: Ã˜ystein Smith
 */ 
#include "draw.h"
#include <util/delay.h>

void draw_color(int r, int g, int b){
  e2:	fc 01       	movw	r30, r24
  e4:	31 96       	adiw	r30, 0x01	; 1
	for (int i=0; i<16; i++){
			image[i*3]   = r;
			image[i*3+1] = g;
  e6:	e2 0f       	add	r30, r18
  e8:	f3 1f       	adc	r31, r19
  ea:	60 83       	st	Z, r22
 *  Author: Ã˜ystein Smith
 */ 
#include "draw.h"
#include <util/delay.h>

void draw_color(int r, int g, int b){
  ec:	fc 01       	movw	r30, r24
  ee:	32 96       	adiw	r30, 0x02	; 2
	for (int i=0; i<16; i++){
			image[i*3]   = r;
			image[i*3+1] = g;
			image[i*3+2] = b;
  f0:	e2 0f       	add	r30, r18
  f2:	f3 1f       	adc	r31, r19
  f4:	40 83       	st	Z, r20
  f6:	03 96       	adiw	r24, 0x03	; 3
 */ 
#include "draw.h"
#include <util/delay.h>

void draw_color(int r, int g, int b){
	for (int i=0; i<16; i++){
  f8:	80 33       	cpi	r24, 0x30	; 48
  fa:	91 05       	cpc	r25, r1
  fc:	71 f7       	brne	.-36     	; 0xda <draw_color+0xa>
			image[i*3]   = r;
			image[i*3+1] = g;
			image[i*3+2] = b;
	}
}
  fe:	08 95       	ret

00000100 <clear>:

void clear(){
	for (int i=0; i<48; i++){
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
		image[i] = 0;
 104:	29 e0       	ldi	r18, 0x09	; 9
 106:	31 e0       	ldi	r19, 0x01	; 1
 108:	f9 01       	movw	r30, r18
 10a:	e8 0f       	add	r30, r24
 10c:	f9 1f       	adc	r31, r25
 10e:	10 82       	st	Z, r1
			image[i*3+2] = b;
	}
}

void clear(){
	for (int i=0; i<48; i++){
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	80 33       	cpi	r24, 0x30	; 48
 114:	91 05       	cpc	r25, r1
 116:	c1 f7       	brne	.-16     	; 0x108 <clear+0x8>
		image[i] = 0;
	}
}
 118:	08 95       	ret

0000011a <delay_ms>:

void delay_ms(int t){
	for (int i=0; i<t; i++){
 11a:	18 16       	cp	r1, r24
 11c:	19 06       	cpc	r1, r25
 11e:	6c f4       	brge	.+26     	; 0x13a <delay_ms+0x20>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	ef ec       	ldi	r30, 0xCF	; 207
 126:	f7 e0       	ldi	r31, 0x07	; 7
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <delay_ms+0xe>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <delay_ms+0x14>
 12e:	00 00       	nop
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	28 17       	cp	r18, r24
 136:	39 07       	cpc	r19, r25
 138:	a9 f7       	brne	.-22     	; 0x124 <delay_ms+0xa>
 13a:	08 95       	ret

0000013c <init>:
		clear();
    }
}

void init(){
	DDRA = 0xff;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
 140:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;
 142:	81 bb       	out	0x11, r24	; 17
	DDRF = 0x03;
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	80 93 61 00 	sts	0x0061, r24
	
	TCCR0 = (1<<WGM01)/*|(1<<CS01)|(1<<CS00)*/|(1<<CS02); //WGM-bit setter på CTC(clear on time compare), CS02 setter prescaler til 64.
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<OCIE0); //Setter til å interrupte på compare.
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	87 bf       	out	0x37, r24	; 55
	OCR0 = (1<<7);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	81 bf       	out	0x31, r24	; 49
}
 156:	08 95       	ret

00000158 <main>:
volatile uint8_t currentRowNo = 0;
volatile uint8_t currentBitNo = 0;
volatile uint8_t compareMask = (1<<7);

int main(void){
	init();
 158:	0e 94 9e 00 	call	0x13c	; 0x13c <init>
	sei();
 15c:	78 94       	sei
	clear();
 15e:	0e 94 80 00 	call	0x100	; 0x100 <clear>
    while(1){
        draw_color(255,0,0);
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	0e 94 68 00 	call	0xd0	; 0xd0 <draw_color>
		delay_ms(1000);
 172:	88 ee       	ldi	r24, 0xE8	; 232
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_ms>
		clear();
 17a:	0e 94 80 00 	call	0x100	; 0x100 <clear>
		draw_color(0,255,0);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	6f ef       	ldi	r22, 0xFF	; 255
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	0e 94 68 00 	call	0xd0	; 0xd0 <draw_color>
		delay_ms(1000);
 18e:	88 ee       	ldi	r24, 0xE8	; 232
 190:	93 e0       	ldi	r25, 0x03	; 3
 192:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_ms>
		clear();
 196:	0e 94 80 00 	call	0x100	; 0x100 <clear>
		draw_color(0,0,255);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	4f ef       	ldi	r20, 0xFF	; 255
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	0e 94 68 00 	call	0xd0	; 0xd0 <draw_color>
		delay_ms(1000);
 1aa:	88 ee       	ldi	r24, 0xE8	; 232
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	0e 94 8d 00 	call	0x11a	; 0x11a <delay_ms>
		clear();
 1b2:	0e 94 80 00 	call	0x100	; 0x100 <clear>
 1b6:	d5 cf       	rjmp	.-86     	; 0x162 <main+0xa>

000001b8 <__vector_15>:
	TCCR0 = (1<<WGM01)/*|(1<<CS01)|(1<<CS00)*/|(1<<CS02); //WGM-bit setter på CTC(clear on time compare), CS02 setter prescaler til 64.
	TIMSK = (1<<OCIE0); //Setter til å interrupte på compare.
	OCR0 = (1<<7);
}

ISR(TIMER0_COMP_vect){
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	0b b6       	in	r0, 0x3b	; 59
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	PORT_ONE = 0;
 1d8:	1b ba       	out	0x1b, r1	; 27
	PORT_TWO = 0;
 1da:	15 ba       	out	0x15, r1	; 21
	PORT_THREE = 0;
 1dc:	12 ba       	out	0x12, r1	; 18
	LINE_EN &= ~((1 << 0)|(1 << 1));
 1de:	e2 e6       	ldi	r30, 0x62	; 98
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8c 7f       	andi	r24, 0xFC	; 252
 1e6:	80 83       	st	Z, r24
	
	oneTemp = 0;
 1e8:	10 92 08 01 	sts	0x0108, r1
	twoTemp = 0;
 1ec:	10 92 07 01 	sts	0x0107, r1
	threeTemp = 0;
 1f0:	10 92 06 01 	sts	0x0106, r1
	
	compareMask = compareMask>>1; //Flytter ocr-register slik at vi går fra 128 til 64 til 32 etc.
 1f4:	80 91 00 01 	lds	r24, 0x0100
 1f8:	86 95       	lsr	r24
 1fa:	80 93 00 01 	sts	0x0100, r24
	if(!compareMask){
 1fe:	80 91 00 01 	lds	r24, 0x0100
 202:	88 23       	and	r24, r24
 204:	e9 f4       	brne	.+58     	; 0x240 <__vector_15+0x88>
		compareMask = 1<<7; // 128
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	80 93 00 01 	sts	0x0100, r24
		currentRowNo++;
 20c:	80 91 05 01 	lds	r24, 0x0105
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	80 93 05 01 	sts	0x0105, r24
		currentRow = currentRow + 24;
 216:	80 91 01 01 	lds	r24, 0x0101
 21a:	90 91 02 01 	lds	r25, 0x0102
 21e:	48 96       	adiw	r24, 0x18	; 24
 220:	90 93 02 01 	sts	0x0102, r25
 224:	80 93 01 01 	sts	0x0101, r24
		if(currentRowNo > 1){
 228:	80 91 05 01 	lds	r24, 0x0105
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	40 f0       	brcs	.+16     	; 0x240 <__vector_15+0x88>
			currentRowNo = 0;
 230:	10 92 05 01 	sts	0x0105, r1
			currentRow = &image;
 234:	89 e0       	ldi	r24, 0x09	; 9
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	90 93 02 01 	sts	0x0102, r25
 23c:	80 93 01 01 	sts	0x0101, r24
		}
	}
		
	if(currentRow[0]&compareMask)  twoTemp   |= (1 << 6); //R0
 240:	e0 91 01 01 	lds	r30, 0x0101
 244:	f0 91 02 01 	lds	r31, 0x0102
 248:	90 81       	ld	r25, Z
 24a:	80 91 00 01 	lds	r24, 0x0100
 24e:	89 23       	and	r24, r25
 250:	29 f0       	breq	.+10     	; 0x25c <__vector_15+0xa4>
 252:	80 91 07 01 	lds	r24, 0x0107
 256:	80 64       	ori	r24, 0x40	; 64
 258:	80 93 07 01 	sts	0x0107, r24
	if(currentRow[1]&compareMask)  twoTemp   |= (1 << 5);
 25c:	91 81       	ldd	r25, Z+1	; 0x01
 25e:	80 91 00 01 	lds	r24, 0x0100
 262:	89 23       	and	r24, r25
 264:	29 f0       	breq	.+10     	; 0x270 <__vector_15+0xb8>
 266:	80 91 07 01 	lds	r24, 0x0107
 26a:	80 62       	ori	r24, 0x20	; 32
 26c:	80 93 07 01 	sts	0x0107, r24
	if(currentRow[2]&compareMask)  twoTemp   |= (1 << 4);
 270:	92 81       	ldd	r25, Z+2	; 0x02
 272:	80 91 00 01 	lds	r24, 0x0100
 276:	89 23       	and	r24, r25
 278:	29 f0       	breq	.+10     	; 0x284 <__vector_15+0xcc>
 27a:	80 91 07 01 	lds	r24, 0x0107
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	80 93 07 01 	sts	0x0107, r24
	if(currentRow[3]&compareMask)  oneTemp   |= (1 << 6); //R1
 284:	93 81       	ldd	r25, Z+3	; 0x03
 286:	80 91 00 01 	lds	r24, 0x0100
 28a:	89 23       	and	r24, r25
 28c:	29 f0       	breq	.+10     	; 0x298 <__vector_15+0xe0>
 28e:	80 91 08 01 	lds	r24, 0x0108
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 93 08 01 	sts	0x0108, r24
	if(currentRow[4]&compareMask)  oneTemp   |= (1 << 7);
 298:	94 81       	ldd	r25, Z+4	; 0x04
 29a:	80 91 00 01 	lds	r24, 0x0100
 29e:	89 23       	and	r24, r25
 2a0:	29 f0       	breq	.+10     	; 0x2ac <__vector_15+0xf4>
 2a2:	80 91 08 01 	lds	r24, 0x0108
 2a6:	80 68       	ori	r24, 0x80	; 128
 2a8:	80 93 08 01 	sts	0x0108, r24
	if(currentRow[5]&compareMask)  twoTemp   |= (1 << 7);
 2ac:	95 81       	ldd	r25, Z+5	; 0x05
 2ae:	80 91 00 01 	lds	r24, 0x0100
 2b2:	89 23       	and	r24, r25
 2b4:	29 f0       	breq	.+10     	; 0x2c0 <__vector_15+0x108>
 2b6:	80 91 07 01 	lds	r24, 0x0107
 2ba:	80 68       	ori	r24, 0x80	; 128
 2bc:	80 93 07 01 	sts	0x0107, r24
	if(currentRow[6]&compareMask)  oneTemp   |= (1 << 0); //R2
 2c0:	96 81       	ldd	r25, Z+6	; 0x06
 2c2:	80 91 00 01 	lds	r24, 0x0100
 2c6:	89 23       	and	r24, r25
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <__vector_15+0x11c>
 2ca:	80 91 08 01 	lds	r24, 0x0108
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	80 93 08 01 	sts	0x0108, r24
	if(currentRow[7]&compareMask)  oneTemp   |= (1 << 1);
 2d4:	97 81       	ldd	r25, Z+7	; 0x07
 2d6:	80 91 00 01 	lds	r24, 0x0100
 2da:	89 23       	and	r24, r25
 2dc:	29 f0       	breq	.+10     	; 0x2e8 <__vector_15+0x130>
 2de:	80 91 08 01 	lds	r24, 0x0108
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	80 93 08 01 	sts	0x0108, r24
	if(currentRow[8]&compareMask)  oneTemp   |= (1 << 2);
 2e8:	90 85       	ldd	r25, Z+8	; 0x08
 2ea:	80 91 00 01 	lds	r24, 0x0100
 2ee:	89 23       	and	r24, r25
 2f0:	29 f0       	breq	.+10     	; 0x2fc <__vector_15+0x144>
 2f2:	80 91 08 01 	lds	r24, 0x0108
 2f6:	84 60       	ori	r24, 0x04	; 4
 2f8:	80 93 08 01 	sts	0x0108, r24
	if(currentRow[9]&compareMask)  oneTemp   |= (1 << 3); //R3
 2fc:	91 85       	ldd	r25, Z+9	; 0x09
 2fe:	80 91 00 01 	lds	r24, 0x0100
 302:	89 23       	and	r24, r25
 304:	29 f0       	breq	.+10     	; 0x310 <__vector_15+0x158>
 306:	80 91 08 01 	lds	r24, 0x0108
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	80 93 08 01 	sts	0x0108, r24
	if(currentRow[10]&compareMask) oneTemp   |= (1 << 4);
 310:	92 85       	ldd	r25, Z+10	; 0x0a
 312:	80 91 00 01 	lds	r24, 0x0100
 316:	89 23       	and	r24, r25
 318:	29 f0       	breq	.+10     	; 0x324 <__vector_15+0x16c>
 31a:	80 91 08 01 	lds	r24, 0x0108
 31e:	80 61       	ori	r24, 0x10	; 16
 320:	80 93 08 01 	sts	0x0108, r24
	if(currentRow[11]&compareMask) oneTemp   |= (1 << 5);
 324:	93 85       	ldd	r25, Z+11	; 0x0b
 326:	80 91 00 01 	lds	r24, 0x0100
 32a:	89 23       	and	r24, r25
 32c:	29 f0       	breq	.+10     	; 0x338 <__vector_15+0x180>
 32e:	80 91 08 01 	lds	r24, 0x0108
 332:	80 62       	ori	r24, 0x20	; 32
 334:	80 93 08 01 	sts	0x0108, r24
	if(currentRow[12]&compareMask) twoTemp   |= (1 << 3); //R4
 338:	94 85       	ldd	r25, Z+12	; 0x0c
 33a:	80 91 00 01 	lds	r24, 0x0100
 33e:	89 23       	and	r24, r25
 340:	29 f0       	breq	.+10     	; 0x34c <__vector_15+0x194>
 342:	80 91 07 01 	lds	r24, 0x0107
 346:	88 60       	ori	r24, 0x08	; 8
 348:	80 93 07 01 	sts	0x0107, r24
	if(currentRow[13]&compareMask) twoTemp   |= (1 << 2);
 34c:	95 85       	ldd	r25, Z+13	; 0x0d
 34e:	80 91 00 01 	lds	r24, 0x0100
 352:	89 23       	and	r24, r25
 354:	29 f0       	breq	.+10     	; 0x360 <__vector_15+0x1a8>
 356:	80 91 07 01 	lds	r24, 0x0107
 35a:	84 60       	ori	r24, 0x04	; 4
 35c:	80 93 07 01 	sts	0x0107, r24
	if(currentRow[14]&compareMask) twoTemp   |= (1 << 1);
 360:	96 85       	ldd	r25, Z+14	; 0x0e
 362:	80 91 00 01 	lds	r24, 0x0100
 366:	89 23       	and	r24, r25
 368:	29 f0       	breq	.+10     	; 0x374 <__vector_15+0x1bc>
 36a:	80 91 07 01 	lds	r24, 0x0107
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	80 93 07 01 	sts	0x0107, r24
	if(currentRow[15]&compareMask) twoTemp   |= (1 << 0); //R5
 374:	97 85       	ldd	r25, Z+15	; 0x0f
 376:	80 91 00 01 	lds	r24, 0x0100
 37a:	89 23       	and	r24, r25
 37c:	29 f0       	breq	.+10     	; 0x388 <__vector_15+0x1d0>
 37e:	80 91 07 01 	lds	r24, 0x0107
 382:	81 60       	ori	r24, 0x01	; 1
 384:	80 93 07 01 	sts	0x0107, r24
	if(currentRow[16]&compareMask) threeTemp |= (1 << 7);
 388:	90 89       	ldd	r25, Z+16	; 0x10
 38a:	80 91 00 01 	lds	r24, 0x0100
 38e:	89 23       	and	r24, r25
 390:	29 f0       	breq	.+10     	; 0x39c <__vector_15+0x1e4>
 392:	80 91 06 01 	lds	r24, 0x0106
 396:	80 68       	ori	r24, 0x80	; 128
 398:	80 93 06 01 	sts	0x0106, r24
	if(currentRow[17]&compareMask) threeTemp |= (1 << 6);
 39c:	91 89       	ldd	r25, Z+17	; 0x11
 39e:	80 91 00 01 	lds	r24, 0x0100
 3a2:	89 23       	and	r24, r25
 3a4:	29 f0       	breq	.+10     	; 0x3b0 <__vector_15+0x1f8>
 3a6:	80 91 06 01 	lds	r24, 0x0106
 3aa:	80 64       	ori	r24, 0x40	; 64
 3ac:	80 93 06 01 	sts	0x0106, r24
	if(currentRow[18]&compareMask) threeTemp |= (1 << 2); //R6
 3b0:	92 89       	ldd	r25, Z+18	; 0x12
 3b2:	80 91 00 01 	lds	r24, 0x0100
 3b6:	89 23       	and	r24, r25
 3b8:	29 f0       	breq	.+10     	; 0x3c4 <__vector_15+0x20c>
 3ba:	80 91 06 01 	lds	r24, 0x0106
 3be:	84 60       	ori	r24, 0x04	; 4
 3c0:	80 93 06 01 	sts	0x0106, r24
	if(currentRow[19]&compareMask) threeTemp |= (1 << 1);
 3c4:	93 89       	ldd	r25, Z+19	; 0x13
 3c6:	80 91 00 01 	lds	r24, 0x0100
 3ca:	89 23       	and	r24, r25
 3cc:	29 f0       	breq	.+10     	; 0x3d8 <__vector_15+0x220>
 3ce:	80 91 06 01 	lds	r24, 0x0106
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	80 93 06 01 	sts	0x0106, r24
	if(currentRow[20]&compareMask) threeTemp |= (1 << 0);
 3d8:	94 89       	ldd	r25, Z+20	; 0x14
 3da:	80 91 00 01 	lds	r24, 0x0100
 3de:	89 23       	and	r24, r25
 3e0:	29 f0       	breq	.+10     	; 0x3ec <__vector_15+0x234>
 3e2:	80 91 06 01 	lds	r24, 0x0106
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	80 93 06 01 	sts	0x0106, r24
	if(currentRow[21]&compareMask) threeTemp |= (1 << 3); //R7
 3ec:	95 89       	ldd	r25, Z+21	; 0x15
 3ee:	80 91 00 01 	lds	r24, 0x0100
 3f2:	89 23       	and	r24, r25
 3f4:	29 f0       	breq	.+10     	; 0x400 <__vector_15+0x248>
 3f6:	80 91 06 01 	lds	r24, 0x0106
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	80 93 06 01 	sts	0x0106, r24
	if(currentRow[22]&compareMask) threeTemp |= (1 << 4);
 400:	96 89       	ldd	r25, Z+22	; 0x16
 402:	80 91 00 01 	lds	r24, 0x0100
 406:	89 23       	and	r24, r25
 408:	29 f0       	breq	.+10     	; 0x414 <__vector_15+0x25c>
 40a:	80 91 06 01 	lds	r24, 0x0106
 40e:	80 61       	ori	r24, 0x10	; 16
 410:	80 93 06 01 	sts	0x0106, r24
	if(currentRow[23]&compareMask) threeTemp |= (1 << 5);
 414:	97 89       	ldd	r25, Z+23	; 0x17
 416:	80 91 00 01 	lds	r24, 0x0100
 41a:	89 23       	and	r24, r25
 41c:	29 f0       	breq	.+10     	; 0x428 <__vector_15+0x270>
 41e:	80 91 06 01 	lds	r24, 0x0106
 422:	80 62       	ori	r24, 0x20	; 32
 424:	80 93 06 01 	sts	0x0106, r24
		
	PORT_ONE = oneTemp;
 428:	80 91 08 01 	lds	r24, 0x0108
 42c:	8b bb       	out	0x1b, r24	; 27
	PORT_TWO = twoTemp;
 42e:	80 91 07 01 	lds	r24, 0x0107
 432:	85 bb       	out	0x15, r24	; 21
	PORT_THREE = threeTemp;
 434:	80 91 06 01 	lds	r24, 0x0106
 438:	82 bb       	out	0x12, r24	; 18
	LINE_EN |= (1 << currentRowNo);
 43a:	e2 e6       	ldi	r30, 0x62	; 98
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	40 81       	ld	r20, Z
 440:	80 91 05 01 	lds	r24, 0x0105
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	b9 01       	movw	r22, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__vector_15+0x298>
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	8a 95       	dec	r24
 452:	e2 f7       	brpl	.-8      	; 0x44c <__vector_15+0x294>
 454:	cb 01       	movw	r24, r22
 456:	84 2b       	or	r24, r20
 458:	80 83       	st	Z, r24
	OCR0 = compareMask; // Remove +128
 45a:	80 91 00 01 	lds	r24, 0x0100
 45e:	81 bf       	out	0x31, r24	; 49
	TCNT0 = 0; //Setter timer til null.
 460:	12 be       	out	0x32, r1	; 50
	
 462:	ff 91       	pop	r31
 464:	ef 91       	pop	r30
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	7f 91       	pop	r23
 46c:	6f 91       	pop	r22
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0b be       	out	0x3b, r0	; 59
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <_exit>:
 482:	f8 94       	cli

00000484 <__stop_program>:
 484:	ff cf       	rjmp	.-2      	; 0x484 <__stop_program>
